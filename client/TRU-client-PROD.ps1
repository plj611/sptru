#Gobal variables
# the wsdl uri
$uri = "https://teams./packaging/tru/_vti_bin/Lists.asmx?wsdl"` 
#
$listname = "Item_Verification"

#Generated Form Function
function GenerateForm {
########################################################################
# Code Generated By: SAPIEN Technologies PrimalForms (Community Edition) v1.0.3.0
# Generated On: 7/7/2009 12:02 PM
# Generated By: patrick.law
########################################################################

#region Import the Assemblies
[reflection.assembly]::loadwithpartialname("System.Windows.Forms") | Out-Null
[reflection.assembly]::loadwithpartialname("System.Drawing") | Out-Null
#endregion

#region Generated Form Objects
$form1 = New-Object System.Windows.Forms.Form
$pictureBox1 = New-Object System.Windows.Forms.PictureBox
$label1 = New-Object System.Windows.Forms.Label
$statusBar1 = New-Object System.Windows.Forms.StatusBar
$button2 = New-Object System.Windows.Forms.Button
$button1 = New-Object System.Windows.Forms.Button
$openFileDialog1 = New-Object System.Windows.Forms.OpenFileDialog
$InitialFormWindowState = New-Object System.Windows.Forms.FormWindowState
#endregion Generated Form Objects

$PostIntoSP= {
	param ($dataContent)

	$itemPosted = 0
<##########
###########
	$Uri = (Get-childitem env:userdomain).value + '\' + (Get-ChildItem env:username).value
	if ((-not $Script:UserCredential.UserName) -or (-not $Script:UserCredential.Password)) {	
		$form1.enabled = $false
		$statusBar1.Text = 'Please enter your user name and password to post items'
		while ($true) {
			trap {continue}
			$Script:UserCredential = (Get-Credential -credential $Uri).GetNetworkCredential()
			$Script:webp.credentials = $Script:UserCredential
			if ($Script:webp.getlist("Item_Verification")) { break }
			$statusBar1.Text = 'User name or password is incorrect'
		}
		$form1.enabled = $true
	}
############
###########>

	$form1.Activate()
	$form1.enabled = $false

    $service = New-WebServiceProxy -Uri $Script:uri -UseDefaultCredential

    $xmldoc = new-object system.xml.xmldocument
 
    $batchelement = $xmldoc.createelement("Batch")
    $batchelement.setattribute("onerror", "continue")
    $batchelement.setattribute("listversion", "1")

	$statusBar1.Text = ''
	$dataContent | foreach {
		if ($_.error -eq $null) {
			$str = 
<##########
###########
@"
<Batch OnError='Continue' ViewName=''>
<Method ID='0' Cmd='New'>
<Field Name='SKN_N'>$($_.skn)</Field>
<Field Name='Title'>$($_.descr)</Field>
<Field Name='UPC'>$($_.upc)</Field>
<Field Name='MPkQty'>$($_.mpkqty)</Field>
<Field Name='CsLngt'>$($_.cswdth)</Field>
<Field Name='CsWdth'>$($_.csdepth)</Field>
<Field Name='CsHt'>$($_.csht)</Field>
<Field Name='CsWt'>$($_.cswt)</Field>
<Field Name='IPQty'>$($_.ipqty)</Field>
<Field Name='UnLngt'>$($_.unwdth)</Field>
#<Field Name='UnWdth'>$($_.undepth)</Field>
<Field Name='UnHt'>$($_.unht)</Field>
<Field Name='UnWt'>$($_.unwt)</Field>
<Field Name='BtyReq'>$($_.btyreq)</Field>
<Field Name='BtyIncl'>$($_.btyincl)</Field>
<Field Name='BtSz1'>$($_.btsz1)</Field>
<Field Name='BtQty1'>$($_.btqty1)</Field>
<Field Name='RcDate'>$($_.rcdate)</Field>
<Field Name='VrDate'>$($_.vrdate)</Field>
<Field Name='SKU'>$($_.sku)</Field>
<Field Name='OptCaseLen'>$($_.optcaselen)</Field>
<Field Name='OptCaseWdth'>$($_.optcasewdth)</Field>
<Field Name='OptCaseHght'>$($_.optcasehght)</Field>
<Field Name='OptCaseWght'>$($_.optcasewght)</Field>
<Field Name='OptItemLen'>$($_.optitemlen)</Field>
<Field Name='OptItemWdth'>$($_.optitemwdth)</Field>
<Field Name='OptItemHght'>$($_.optitemhght)</Field>
<Field Name='OptItemWght'>$($_.optitemwght)</Field>
</Method></Batch>
"@
###########
##########>

@"
<Method ID='0' Cmd='New'>
<Field Name='SKN_N'>$($_.skn)</Field>
<Field Name='Title'>$($_.descr)</Field>
<Field Name='UPC'>$($_.upc)</Field>
<Field Name='MPkQty'>$($_.mpkqty)</Field>
<Field Name='CsLngt'>$($_.cswdth)</Field>
<Field Name='CsWdth'>$($_.csdepth)</Field>
<Field Name='CsHt'>$($_.csht)</Field>
<Field Name='CsWt'>$($_.cswt)</Field>
<Field Name='IPQty'>$($_.ipqty)</Field>
<Field Name='UnLngt'>$($_.unwdth)</Field>
#<Field Name='UnWdth'>$($_.undepth)</Field>
<Field Name='UnHt'>$($_.unht)</Field>
<Field Name='UnWt'>$($_.unwt)</Field>
<Field Name='BtyReq'>$($_.btyreq)</Field>
<Field Name='BtyIncl'>$($_.btyincl)</Field>
<Field Name='BtSz1'>$($_.btsz1)</Field>
<Field Name='BtQty1'>$($_.btqty1)</Field>
<Field Name='RcDate'>$($_.rcdate)</Field>
<Field Name='VrDate'>$($_.vrdate)</Field>
<Field Name='SKU'>$($_.sku)</Field>
<Field Name='OptCaseLen'>$($_.optcaselen)</Field>
<Field Name='OptCaseWdth'>$($_.optcasewdth)</Field>
<Field Name='OptCaseHght'>$($_.optcasehght)</Field>
<Field Name='OptCaseWght'>$($_.optcasewght)</Field>
<Field Name='OptItemLen'>$($_.optitemlen)</Field>
<Field Name='OptItemWdth'>$($_.optitemwdth)</Field>
<Field Name='OptItemHght'>$($_.optitemhght)</Field>
<Field Name='OptItemWght'>$($_.optitemwght)</Field>
</Method>
"@

			$statusBar1.Text = "Posting item: $($_.descr)"

<##########
###########

			$xmlstr = [xml]$str
			$bresult=$Script:webp.UpdateListItems("item_verification", $xmlstr)
###########
##########>
            
            $batchelement.innerxml = $str
 
 # Add the record
            $ndreturn = $service.updatelistitems($Script:listName, $batchelement)

#			$bresult | Out-Host
			$itemPosted++
		}
	}
	$form1.enabled = $true
	$statusBar1.Text = "$itemPosted item(s) posted. "
}

$TransformContent= {
	param ($dataContent)
	
	$statusBar1.Text = "Reading the item file..."

	$err = $false
	
	$transformData = $dataContent[0 .. $($dataContent.length - 1)] | foreach {
		if ($_.length -ne 0) {
			$h = @{}
			$temp = $_.split(',')
			if ($temp.length -eq 59) {
				$h.skn = $temp[0]
				$h.descr = $temp[1].toupper()
				$h.upc = $temp[17]
				$h.mpkqty = $temp[7]
				$h.cswdth = $temp[8]
				$h.csdepth = $temp[9]
				$h.csht = $temp[10]
				$h.cswt = $temp[11]
				$h.ipqty = $temp[18]
				$h.unwdth = $temp[19]
				$h.undepth = $temp[20]
				$h.unht = $temp[21]
				$h.unwt = $temp[22]
#				$h.vrdate = [string]::format("{0:yyyy-MM-ddTHH:mm:ssZ}", [datetime]$temp[52])
				$h.vrdate = $temp[52]
				$h.sku = $temp[53].toupper()
		
				$h.btyreq = $temp[54]
				if ($h.btyreq -eq "y") {
					$h.btyreq = "True"
				}
				elseif ($h.btyreq -eq "n") {
					$h.btyreq = "False"
				}
		
				$h.btyincl = $temp[55]
				if ($h.btyincl -eq "y") {
					$h.btyincl = "True"
				}
				elseif ($h.btyincl -eq "n") {
					$h.btyincl = "False"
				}
		
				$h.btsz1 = $temp[56]
				$h.btqty1 = $temp[57]
#				$h.rcdate = [string]::format("{0:yyyy-MM-ddTHH:mm:ssZ}", [datetime]$temp[58])
				$h.rcdate = $temp[58]


#New Change for TRU 7-11-2013
				$h.optcaselen = $h.csdepth
				$h.optcasewdth = $h.cswdth
				$h.optcasehght = $h.csht
				$h.optcasewght = $h.cswt
				$h.optitemlen = $h.undepth
				$h.optitemwdth = $h.unwdth
				$h.optitemhght = $h.unht
				$h.optitemwght = $h.unwt

				$h.error = $null
				$h
			}
			else {
				$err = $true			
			}
		}
	}
	if (-not $err) {
		$statusBar1.Text = ""
	}
	else {
		$statusBar1.Text = "Item feed file error"
		$transformData = $null
	}
	$TransformData
}

$CheckContent= {
	param ($transformdata)
	
	$err = $false
	foreach ($i in $transformData) {
		$statusBar1.Text = "Checking data format in item: " + $i.skn
		if ($i.skn -notmatch "^\d{1,15}$") {
			$err = $true
			$i.error = "SKN format error (should be in format 9{1,15}) Current Value: " + $i.skn
			continue
		}
		if (($i.descr.length -le 0) -or ($i.descr.length -gt 120)) {
			$err = $true
			$i.error = "Description format error (should be in format a{1,120})"
			continue
		}
		else {
			$i.descr = $i.descr -replace '&', '&amp;'
			$i.descr = $i.descr -replace '<', '&lt;'
			$i.descr = $i.descr -replace '>', '&gt;'
			$i.descr = $i.descr -replace '"', '&quot;'
			$i.descr = $i.descr -replace "'", '&apos;'
		}
		if ($i.upc -notmatch "^\d{1,15}$") {
			$err = $true
			$i.error = "UPC format error (should be in format 9{1,15}) Current Value: " + $i.upc
			continue
		}
		if ($i.mpkqty -notmatch "^\d{1,7}$") {
			$err = $true
			$i.error = "Mpkqty format error (should be in format 9{1,7}) Current Value: " + $i.mpkqty
			continue
		}
		if ([int]($i.mpkqty) -eq 0) {
			$err = $true
			$i.error = "Mpkqty can't be zero"
			continue
		}
		if ($i.ipqty -notmatch "^\d{1,7}$") {
			$err = $true
			$i.error = "Ipqty format error (should be in format 9{1,7}) Current Value: " + $i.ipqty
			continue
		}
#		if (($i.sku).length -gt 8) {
#			$err = $true
#			$i.error = "SKU too long (should be in format a{1,8})"
#			continue
#		}
#		else {
#			$i.sku = $i.sku -replace '&', '&amp;'
#			$i.sku = $i.sku -replace '<', '&lt;'
#			$i.sku = $i.sku -replace '>', '&gt;'
#			$i.sku = $i.sku -replace '"', '&quot;'
#			$i.sku = $i.sku -replace "'", '&apos;'
#		}

		$i.sku = $i.sku -replace '&', '&amp;'
		$i.sku = $i.sku -replace '<', '&lt;'
		$i.sku = $i.sku -replace '>', '&gt;'
		$i.sku = $i.sku -replace '"', '&quot;'
		$i.sku = $i.sku -replace "'", '&apos;'

		if ("True", "False" -notcontains $i.btyreq) {
			$err = $true
			$i.error = "Btyreq format error (should be in format Y/N) Current Value: " + $i.btyreq
			continue
		}
		if ("True", "False" -notcontains $i.btyincl) {
			$err = $true
			$i.error = "Btyincl format error (should be in format Y/N) Current Value: " + $i.btyincl
			continue
		}
		
		& {
			trap {Set-Variable -Name err -value $true -Scope 2; $i.error = "Vrdate format error. Current Value: " + $i.vrdate; continue }
			$i.vrdate = [string]::format("{0:yyyy-MM-ddTHH:mm:ssZ}", [datetime]$i.vrdate)
		}
	
		& {
			trap {Set-Variable -Name err -Value $true -Scope 2; $i.error = "Rcdate format error. Current Value: " + $i.rcdate; continue }
			$i.rcdate = [string]::format("{0:yyyy-MM-ddTHH:mm:ssZ}", [datetime]$i.rcdate)
		}

		$btyType = "AA", "AAA", "C", "D", "LR44", "12V", "4AA NICAD", "6V", "7.2 NICAD", "9.6 NICAD", "9V"
		if ($i.btyreq -eq "True") {
			if ($i.btsz1.length -ne 0) {
				if ($btyType -notcontains $i.btsz1) {
					$err = $true
					$i.error = "Btsz1 format error (should be in format $btyType) Current Value: " + $i.btsz1
					continue
				}
				if ($i.btqty1 -notmatch "^\d{1,2}$") {
					$err = $true
					$i.error = "Btqty1 format error (should be in format 9{1,2}) Current Value: " + $i.btqty1
					continue
				}
				if ($i.btqty1 -eq 0) {
					$err = $true
					$i.error = "Btqty1 cannot be 0"
					continue
				}
			}
			else {
				if ($i.btqty1.length -ne 0) {
					$err = $true
					$i.error = "Btqty1 should be empty if Btsz1 is empty"
					continue
				}
			}






#			if ($btyType -notcontains $i.btsz1) {
#				$err = $true
#				$i.error = "Btysz1 format error (should be in format $btyType) Current Value: " + $i.btsz1
#				continue
#			}
#			if ($i.btqty1 -notmatch "^\d{1,2}$") {
#				$err = $true
#				$i.error = "Btyqty1 format error (should be in format 9{1,2}) Current Value: " + $i.btqty1
#				continue
#			}
#			if ($i.btqty1 -eq 0) {
#				$err = $true
#				$i.error = "Btyqty1 cannot be 0"
#				continue
#			}
		}
		else {
		# Btyreq is false
			if ($i.btyincl -ne "False") {
				$err = $true
				$i.error = "Btyreq is false but Btyincl is true"
				continue
			}
			if ($i.btsz1.length -ne 0) {
				$err = $true
				$i.error = "Btyreq is false but Btsz1 contains value"
				continue
			}
			if ($i.btqty1.length -ne 0) {
				$err = $true
				$i.error = "Btyreq is false but Btqty1 contains value"
				continue
			}
		}
	}
	$statusBar1.Text = ""
	$err
}

$displayErr = {
	param ($transformData)
	
	$styleFormat = "<style type='text/css'>
	body { background-color:#EEEEEE; }
	body,table,td,th { font-family:Tahoma; color:Black; Font-Size:10pt }
	th { font-weight:bold; background-color:#CCCCCC; }
	td { background-color:white; } </style>"

	$statusBar1.Text = $statusBar1.Text + "Data format errors are found in the item file..."
	Out-Null
	Start-Sleep 5
	Out-Null
	$transformData | foreach {
		if ($_.error -ne $null) {
			$_ = Add-Member -MemberType ScriptProperty -Name SKN -Value {$this.skn} -InputObject $_ -PassThru
			$_ = Add-Member -MemberType ScriptProperty -Name ERROR -Value {$this.error} -InputObject $_ -PassThru
			$_ = Add-Member -MemberType ScriptProperty -Name DESCRIPTION -Value {$this.descr} -InputObject $_ -PassThru
			
			$_.descr = $_.descr -replace '&amp;', '&'
			$_.descr = $_.descr -replace '&lt;', '<'
			$_.descr = $_.descr -replace '&gt;', '>'
			$_.descr = $_.descr -replace '&quot;', '"'
			$_.descr = $_.descr -replace '&apos;', "'"
		}
	}
	Remove-Item $(Join-Path $env:TMP Tru-error-temp.htm) -ErrorAction SilentlyContinue
	Remove-Item $(Join-Path $env:TMP Tru-error.htm) -ErrorAction SilentlyContinue
	$transformData | ConvertTo-Html -head $styleFormat -Property SKN, DESCRIPTION, ERROR | Out-File $(join-path $env:tmp Tru-error-temp.htm)
	$(Get-Content $(Join-Path $env:TMP tru-error-temp.htm)) -replace "^<tr><td></td><td></td><td></td></tr>$" | Out-File $(Join-Path $env:TMP tru-error.htm)
	Invoke-Item $(join-path $env:tmp Tru-error.htm)
}

$UploadIntoSP= {
	param ($FileName)

	$dataContent = Get-Content $FileName

#
# Change on 2-13-2014 $dataContent may contain only one line and error will occur when passing to TransformContent, the one line will be treat as an array of chars instead of an array of strings
#	$transformData = & $TransformContent $dataContent

	$transformData = & $TransformContent @($dataContent)

	if ($transformData -ne $null) {
		$containErr = & $CheckContent $transformdata
		if ($containErr) {
			& $displayErr $transformData
		}
		else {
			& $PostIntoSP $transformdata
		}
	}
}

#----------------------------------------------
#Generated Event Script Blocks
#----------------------------------------------
#Provide Custom Code for events specified in PrimalForms.
$button1_OnClick= 
{
#TODO: Place custom script here
	$result = $openFileDialog1.ShowDialog()
	if ($result -eq [system.windows.forms.dialogresult]::OK) {
		$label1.Text = 'Item file: ' + $(Split-path -Leaf $openFileDialog1.FileName)
		& $UploadIntoSP $openFileDialog1.FileName
	}	
}

$button2_OnClick= 
{
#TODO: Place custom script here
	$openFileDialog1.dispose()
	$form1.dispose()
}

$OnLoadForm_StateCorrection=
{#Correct the initial state of the form to prevent the .Net maximized form issue
	$form1.WindowState = $InitialFormWindowState
}

#----------------------------------------------
#region Generated Form Code
$form1.Text = 'TRU item upload -- PRODUCTION'
$form1.Name = 'form1'
$form1.DataBindings.DefaultDataSourceUpdateMode = 0
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 232
$System_Drawing_Size.Width = 500
$form1.ClientSize = $System_Drawing_Size

$pictureBox1.Name = 'pictureBox1'
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 146
$System_Drawing_Size.Width = 146
$pictureBox1.Size = $System_Drawing_Size

$pictureBox1.WaitOnLoad = $True
$pictureBox1.TabIndex = 4
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 13
$System_Drawing_Point.Y = 24
$pictureBox1.Location = $System_Drawing_Point


# $pictureBox1.InitialImage = [System.Drawing.Image]::FromFile('C:\Documents and Settings\Patrick.Law\Desktop\T\toysrus-logo-high.jpg')
# $pictureBox1.Image = [System.Drawing.Image]::FromFile($(join-path (get-location).path 'toysrus-logo-high.jpg'))
$pictureBox1.Image = [System.Drawing.Image]::FromFile($(join-path (get-location).path 'toysrus-logo-new.jpg'))
$pictureBox1.TabStop = $False
$pictureBox1.DataBindings.DefaultDataSourceUpdateMode = 0

$form1.Controls.Add($pictureBox1)

$label1.TabIndex = 3
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 16
$System_Drawing_Size.Width = 329
$label1.Size = $System_Drawing_Size
$label1.Name = 'label1'
$label1.Text = ''
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 13
$System_Drawing_Point.Y = 5
$label1.Location = $System_Drawing_Point

$label1.DataBindings.DefaultDataSourceUpdateMode = 0

$form1.Controls.Add($label1)

$statusBar1.Name = 'statusBar1'
$statusBar1.Text = ''
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 22
$System_Drawing_Size.Width = 221
$statusBar1.Size = $System_Drawing_Size
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 0
$System_Drawing_Point.Y = 210
$statusBar1.Location = $System_Drawing_Point
$statusBar1.DataBindings.DefaultDataSourceUpdateMode = 0
$statusBar1.TabIndex = 2

$form1.Controls.Add($statusBar1)

$button2.TabIndex = 1
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 23
$System_Drawing_Size.Width = 75
$button2.Size = $System_Drawing_Size
$button2.Name = 'button2'
$button2.Text = 'Exit'
$button2.UseVisualStyleBackColor = $True

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 134
$System_Drawing_Point.Y = 181
$button2.Location = $System_Drawing_Point

$button2.DataBindings.DefaultDataSourceUpdateMode = 0
$button2.add_Click($button2_OnClick)

$form1.Controls.Add($button2)

$button1.TabIndex = 0
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 23
$System_Drawing_Size.Width = 75
$button1.Size = $System_Drawing_Size
$button1.Name = 'button1'
$button1.Text = 'Upload'
$button1.UseVisualStyleBackColor = $True

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 12
$System_Drawing_Point.Y = 181
$button1.Location = $System_Drawing_Point

$button1.DataBindings.DefaultDataSourceUpdateMode = 0
$button1.add_Click($button1_OnClick)

$form1.Controls.Add($button1)

$openFileDialog1.FileName = ''
$openFileDialog1.Filter = 'csv files (*.csv)|*.csv|All files (*.*)|*.*'
$openFileDialog1.ShowHelp = $True

#endregion Generated Form Code

#Save the initial state of the form
$InitialFormWindowState = $form1.WindowState
#Init the OnLoad event to correct the initial state of the form
$form1.add_Load($OnLoadForm_StateCorrection)

#Show the Form
$form1.add_shown({$form1.Activate()})
$form1.ShowDialog()| Out-Null


} #End Function

#Call the Function
GenerateForm
